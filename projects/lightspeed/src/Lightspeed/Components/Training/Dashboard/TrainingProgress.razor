@{
	// Capture the current state of the component so that if the training
	//   session broadcasts new data, the UI doesn't display some new and some
	//   old data
	State? temp = null;
	lock(_lock)
	{
		temp = _state;
	}

	// Helper used to avoid having to use `.Value` every time a property is
	//   accessed from the state struct
	State state = temp.Value;
}

<!-- Progress Bar -->
<div class="row">
	<div class="col-12">
		<div class="progress">
			<div class="@state.ProgressBarCss"
				role="progressbar"
				style="width: @state.ProgressBarWidth%;"
				aria-valuenow="@state.ProgressBarWidth"
				aria-valuemin="0"
				aria-valuemax="100"
				title="Training Session Progress">
				@state.CurrentEpoch / @state.TotalEpochs Epochs
			</div>
	</div>
	</div>
</div>

<!-- Start/End Time Info -->
<div class="row">
	<div class="col-6 d-flex justify-content-start">
		<span class="mb-0 text-info text-start">
			Start Time: @StartTime
		</span>
	</div>
	<div class="col-6 d-flex justify-content-end">
		<span class="mb-0 text-info text-end">
			End Time: @EndTime
		</span>
	</div>
</div>

<!-- Elapsed Time Info -->
<div class="row">
	<div class="col-6 d-flex justify-content-start">
		<span class="mb-0 text-info text-start">
			Elapsed: @state.ElapsedTime.ToString("hh\\:mm\\:ss")
		</span>
	</div>
	<div class="col-6 d-flex justify-content-end">
		<span class="mb-0 text-info text-end">
			Remaining: @state.EstimatedTimeRemaining.ToString("hh\\:mm\\:ss")
		</span>
	</div>
</div>
