/*
 *   Copyright (c) 2023 Zach Wilson
 *   All rights reserved.
 */
using Mcs.Agents;
using Mcs.Cli.Rewards;
using Mcs.Simulator;
using Mcs.Simulator.Actions;
using Mcs.Simulator.Events;
using Mcs.Simulator.Simulation;
namespace Mcs.Cli.Simulation;

/// Handles running a single transpose simulation instance.
public class Instance
{
	/// Simulator used for the simulation.
	private readonly ISimulator _simulator;

	/// Component used to generate rewards for the agent.
	private readonly IRewardComponent _rewardComponent;

	/// Registers used for the simulation.
	private readonly IReadOnlyList<Register> _registers;

	/// Agent used for the simulation.
	private readonly IAgent _agent;

	/// Initializes the simulation instance.
	/// @param simulator Simulator used for the simulation.
	/// @param rewardComponent Component used to generate rewards for the agent.
	/// @param agent Agent used for the simulation.
	public Instance(
		ISimulator simulator,
		IRewardComponent rewardComponent,
		int registerCount,
		IAgent agent)
	{
		_simulator = simulator;
		_rewardComponent = rewardComponent;
		_agent = agent;

		// Create the registers
		_registers = Enumerable.Range(0, registerCount)
			.Select(i => new Register(i))
			.ToList();
	}

	/// Runs the simulation instance.
	/// @returns Results of the simulation instance.
	public SimulationResults Run()
	{
		// Metrics to be tracked
		var cacheHits = 0;
		var cacheMisses = 0;
		var totalMemoryAccesses = 0;
		var score = 0;

		// Bind to simulation events to update metrics
		_simulator.OnMemoryAccess += (sender, args) =>
		{
			cacheHits += args.IsCacheHit ? 1 : 0;
			cacheMisses += args.IsCacheHit ? 0 : 1;
			totalMemoryAccesses += 1;
		};

		// Run the simulation
		while (!_simulator.Validate())
		{
			// Get the actions to apply
			var actions = _agent.GetActions();
			foreach (var action in actions)
			{
				var result = ApplyAction(action);
				score += result.Reward;
				_agent.NotifyResult(action, result);
			}
		}

		return new SimulationResults
		{
			CacheHits = cacheHits,
			CacheMisses = cacheMisses,
			TotalMemoryAccesses = totalMemoryAccesses,
			Score = score
		};
	}

	/// Applies an action that was generated by the agent.
	/// @param action Action to apply.
	/// @returns Result of applying the action.
	private Result ApplyAction(IAction action)
	{
		// Variables used to track the results of the action
		var cacheHit = false;
		var cacheEviction = false;

		// Bind to simulation events to track the results of the action
		void OnMemoryAccess(object? _, OnMemoryAccessedEventArgs args)
			=> cacheHit = args.IsCacheHit;
		void OnCacheLineEvicted(object? _, OnCacheLineEvictedEventArgs __)
			=> cacheEviction = true;
		_simulator.OnMemoryAccess += OnMemoryAccess;
		_simulator.OnCacheLineEvicted += OnCacheLineEvicted;

		// Apply the action
		action.ApplyAction(_simulator, _registers);

		// Generate a preliminary results object to use to calculate the reward
		var prelimResult = new Result
		{
			CacheHit = cacheHit,
			CacheEviction = cacheEviction,
			Reward = 0
		};
		var result = prelimResult with
		{
			Reward = _rewardComponent.GetReward(action, prelimResult)
		};

		// Handle clean up
		_simulator.OnMemoryAccess -= OnMemoryAccess;
		_simulator.OnCacheLineEvicted -= OnCacheLineEvicted;

		return result;
	}
}
